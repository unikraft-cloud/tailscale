name: release

on:
  push:
    branches: [prod-staging, prod-stable, prod-preview]
  workflow_dispatch:

permissions:
  contents: write
  packages: write

jobs:
  release:
    runs-on: ubuntu-latest
    container: debian:bookworm
    env:
      GO_VERSION: stable
      PYTHONDONTWRITEBYTECODE: 1
      UKP_PACKAGE: /platform-tailscaled-install
    steps:
    - name: Install extra build dependencies
      run: |
        set -xe
        apt-get update
        apt-get install --no-install-recommends -y \
          git \
          wget \
          curl \
          rename \
          ca-certificates

    - name: Install release dependencies
      run: |
        set -xe
        echo 'deb [trusted=yes] https://repo.goreleaser.com/apt/ /' | tee /etc/apt/sources.list.d/goreleaser.list
        echo "deb [trusted=yes] https://apt.fury.io/cli/ * *" > /etc/apt/sources.list.d/fury-cli.list
        apt-get update
        apt-get install --no-install-recommends -y nfpm fury-cli

    - name: Set up Go ${{ env.GO_VERSION }}
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        submodules: false

    - name: Build
      id: build
      run: |
        set -xe
        git config --global --add safe.directory "$GITHUB_WORKSPACE"

        ./build_dist.sh tailscale.com/cmd/tailscale
        ./build_dist.sh tailscale.com/cmd/tailscaled

        mkdir -p "${UKP_PACKAGE}/usr/bin"
        mkdir -p "${UKP_PACKAGE}/usr/sbin"
        mv ./tailscale  "${UKP_PACKAGE}/usr/bin/tailscale"
        mv ./tailscaled "${UKP_PACKAGE}/usr/sbin/tailscaled"

        echo "COMMITS=$(git describe --tags --long | awk -F'-' '{print $2}')" > "$GITHUB_OUTPUT"

    - name: Package
      shell: bash
      run: |
        set -xe
        ts_version="$(${UKP_PACKAGE}/usr/sbin/tailscaled --version)"
        VERSION=$(echo -n "$ts_version" | head -n 1 | sed 's/^v//')
        VERSION="${VERSION}-${{ steps.build.outputs.COMMITS }}+$(git rev-parse --short=7 HEAD)"
        PKG_COMPONENT=
        PKG_VERSION=
        PKG_FEED=

        branch2version() {
          # bash-internal version that is likely safer and faster
          local I=
          local C=
          local VER_BRANCH=
          local VER_USER=

          for (( I=0; I<${#1}; I++ )); do
            C="${1:$I:1}"
            if [[ "${C}" =~ [0-9a-zA-Z] ]]; then
              # Keep lower-case version of allowed character
              VER_BRANCH+="${C,,}"
            elif [[ "${C}" = "/" ]] && [ -z ${VER_USER} ] ; then
              # First '/': save content as user name
              VER_USER="${VER_BRANCH}"
              VER_BRANCH=
            else
              # Replace with '+'
              VER_BRANCH+="+"
            fi
          done

          printf "%s\n" "${VER_USER}" # can be empty
          printf "%s\n" "${VER_BRANCH}"
        }

        if [[ "$GITHUB_REF" == *"prod-staging"* ]]; then
          PKG_COMPONENT="staging"
          PKG_VERSION="5:${VERSION}-2staging"
          PKG_FEED="cloud-staging"
        elif [[ "$GITHUB_REF" == *"prod-stable"* ]]; then
          PKG_COMPONENT="stable"
          PKG_VERSION="5:${VERSION}-9stable"
          PKG_FEED="cloud"
        elif [[ "$GITHUB_REF" == "refs/heads/prod-preview" ]]; then
          PKG_COMPONENT="preview"
          PKG_VERSION="5:${VERSION}-7preview"
          PKG_FEED="cloud"
        else
          mapfile -t BRCUSTOM < <( branch2version "$( printf '%s' "$GITHUB_REF" | cut -f1,2 --complement -d'/' )")
          if [ -n "${BRCUSTOM[0]}" ]; then
            PKG_COMPONENT="${BRCUSTOM[0]}"
            PKG_VERSION="5:${VERSION}-0dev+${BRCUSTOM[0]}+${BRCUSTOM[1]}"
          else
            # branch does not have a user name
            PKG_COMPONENT="devel"
            PKG_VERSION="5:${VERSION}-0dev+${BRCUSTOM[1]}"
          fi
          PKG_FEED="cloud-internal"
        fi

        export SEMVER="${PKG_VERSION}"
        mkdir -p /dist
        nfpm package --config nfpm.yaml --packager deb --target /dist
        rename 's/:/_/g' /dist/*.deb

        # Save the SEMVER for later steps
        echo "SEMVER=${SEMVER}" >> "$GITHUB_OUTPUT"
        echo "PKG_COMPONENT=${PKG_COMPONENT}" >> $GITHUB_OUTPUT
        echo "PKG_FEED=${PKG_FEED}" >> $GITHUB_OUTPUT

    - name: Upload build artifacts to GitHub
      uses: actions/upload-artifact@v4
      with:
        name: platform-tailscaled-latest
        path: /dist
        if-no-files-found: error
        retention-days: 1
        overwrite: true

    - name: Publish to Gemfury
      if: github.ref == 'refs/heads/prod-stable' || github.ref == 'refs/heads/prod-staging'
      shell: bash
      run: |
        set -xe
        if [[ "$GITHUB_REF" == *"prod-stable"* ]]; then
          FUSER="$FURY_USER_STABLE"
          FTOKEN="$FURY_TOKEN_STABLE"
        fi
        fury push "$(ls /dist/*.deb)" --quiet --account "$FUSER" --api-token "$FTOKEN"
      env:
        FURY_TOKEN_STABLE: ${{ secrets.FURY_TOKEN }}
        FURY_USER_STABLE: ${{ secrets.FURY_USER }}
        FUSER: ${{ secrets.FURY_USER_STAGING }}
        FTOKEN: ${{ secrets.FURY_TOKEN_STAGING }}
    
    - name: Publish to APT repository
      shell: bash
      env:
        PKG_COMPONENT: ${{ steps.package.outputs.PKG_COMPONENT }}
        PKG_FEED: ${{ steps.package.outputs.PKG_FEED }}
      run: |
        set -xe
        INTERNAL_FEED=cloud-internal
        DISTRO="bullseye"

        upload() {
          local pattern="$1" feed="$2" distro="$3" component="$4"
          for deb in $pattern; do
            [ -e "$deb" ] || continue
            cat "${deb}" | curl -L -v \
              "https://pkg.unikraft.com:8080/debian/$feed/upload/$distro/$component" \
              -H "Transfer-Encoding: chunked" \
              -u "api:${{ secrets.PKG_TOKEN }}" \
              -X POST \
              --data-binary @-
          done

          return $?
        }
        
        # upload "/dist/*dbg_*.deb"  "$INTERNAL_FEED" "$DISTRO" "$PKG_COMPONENT"
        # rm -f "/dist/*dbg_*.deb"
        upload "/dist/*.deb" "$PKG_FEED" "$DISTRO" "$PKG_COMPONENT"
